Purpose of this repo is to create a full-stack DevSecOps with Fortinet Cybersecurity Solution (WIP)

Tools:
Build Tools : npm, maven
CICD: Github Actions
IaC : Terraform, Docker, Cloudformation, Shell
Logging: ELK/Loki
Monitoring: Prometheus/Grafana (SaaS)
Orchestrator: GKE,AKS,EKS
eBPF: built-in Calico CNI
Artifact Management: JFrog Artifactory (SaaS)
Secret Management: HCP Vault (SaaS)
Cloud Provider: AWS, Azure, GCP
Security: FortiDevSec, FortiDAST,  FortiCNP, FortiADC, FortiWEB


*AZURE*

#Pre-requisite
 a) Ensure that if you have created Azure Resource Group, Storage Account, Storage Container and Storage Key before you start.

#Login to your Azure using below cmd in powershell or any shell. It will prompt Azure page
 a) az login

#To auth using SP please change to your subscription ID
 a) az ad sp create-for-rbac --name "github-actions-sp" --role contributor --scopes /subscriptions/<your-subscription-id> --sdk-auth
A sample of this will be shown in Output
{
  "clientId": "xxx-xxx-xxx",
  "clientSecret": "xxxxxx",
  "subscriptionId": "xxxxx",
  "tenantId": "xxxxx",
  ...
}

#copy paste above result to GitHub repo secrets as JSON (if using Service Principal) or use below if using USERS Account
# (if you have not done so)For Azure storage access key, please go to Azure and create a new resource group and storage account, storage container and storage key as we need to use this later in the terraform to point to existing resources. Especially storing the tfstate in storage container
 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
 ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
 ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}

Apply takes about 8 mins to complete

#To Clean up
uncomment the  name: 'Terraform Destroy'
 a) Destroy takes about 8 mins to complete as well

*AWS*
#copy paste below credentials to your Github repo secrets
 a) aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
 b) aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 c) aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

#To Cleanup
 a) uncomment "Delete CloudFormation stack" to destroy

*GCP*
*For Bash, the order of creation and deletion is IMPORTANT ! 
# Authenticate using GCLOUD_SERVICE_KEY.
 a) Create a new Service Account and grant the permissions
   -Service Account User
   -Kubernetes Engine Admin
   -Compute Network Admin
   -Viewer

# After create SA from GCP Console and downloaded the json, convert to base64 and upload to git secrets or hashivault
cat sa.json | base64

# --------------THIS SESSION FOR JUMPHOST IN GCP, so only JUMPHOST can manage GKE----------------
# Create key pair from your laptop and upload to GCP if u have not done so (this is for access jumphost later)
ssh-keygen -t rsa -b 2048 -f ~/.ssh/jl-gcp-key
Copy pub key to GCP SSH Keys under Metadata
SSH to jump host (username can be found during/after created in the key)

# Install kubectl and GCP AUth Plugin to auth to GKE
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
gcloud components update
sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
# Add k8s config to local jumphost
gcloud container clusters get-credentials jl-gke-sg --zone=asia-southeast1-a
# Test the kubectl
kubectl get nodes


# To apply run gke-bash.yml workflow and it will execute gke-bash.sh
# To clean up run gke-bash-destroy.yml workflow and it will execute gke-bash-destroy.sh

----------------------------------------------------------------------------------------
*AWS*
 a) Login with "aws configure" and key in the necessary values for access key, secret, region
 b) Next, aws eks update-kubeconfig --region ap-southeast-1 --name jl-eks-sg on your local machine to access
 c) Grafana will also be deployed to grab K8S Metrics Status

----------------------------------------------------------------------------------------
OTHERS
Remove history commit and build new branch to main
git checkout --orphan latest_branch
git add -A
git commit -am "commit message"
git branch -D main
git branch -m main
git push -f origin main

Dockerfile
Testing Security for Fdevsec (Container/IaC)
Start with FROM node:14, then  14.20.1-buster-slim then 14.20.1-alpine, then to see the result
Application
- Sample pii data application built with NodeJS
- Ensure to Run "npm init", "npm install express --save" to produce package.json and node_modules to push to Artifactory later 

Bastion Host in AWS
# Install kubectl
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin

# Install aws-iam-authenticator
curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
chmod +x ./aws-iam-authenticator
sudo mv ./aws-iam-authenticator /usr/local/bin

# Configure AWS CLI & key in your access key and secrets
aws configure

# Update kubeconfig & modify your region and cluster name
aws eks update-kubeconfig --region <region> --name <cluster_name>

# Verify kubectl access
kubectl get nodes
