# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.


# Default template for yaml azure pipeline
# trigger
# - main
#
# pool:
#   vmimage: ubuntu-latest
#
# steps:
# - script: echo Hello, World!
#   displayName:'Run a one line script'
#
# - script: |
#   echo Add other tasks to build, test, and deploy your project
#   echo see https://aka.ms/yml for more details
#   displayName: 'Run a multi line script'
#





#trigger:
#- main
#pool:
#  vmImage: 'ubuntu-latest'

trigger:
- main

pool:
  vmImage: 'windows-latest'

steps:
- task: Maven@3
  displayName: Build with Maven
  inputs:
    mavenPomFile: 'app/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'


steps:
- task: Bash@3
  env:
    VERACODE_API_KEY_ID: $(VERACODE_API_ID)
    VERACODE_API_KEY_SECRET: $(VERACODE_API_KEY)
  inputs:
    targetType: 'inline'
    script: |
      curl -fsS https://tools.veracode.com/veracode-cli/install | sh
      ./veracode package -a -d -t directory -s app/

- task: Veracode@3
  inputs:
    ConnectionDetailsSelection: 'Credentials'
    apiId: '$(VERACODE_API_ID)'
    apiKey: '$(VERACODE_API_KEY)'
    veracodeAppProfile: '$(system.teamProject)'
    version: '$(build.buildNumber)'
    filepath: '$(System.DefaultWorkingDirectory)/*.war' # filepath or folderpath of files to upload to Veracode
    createProfile: true
    importResults: true
    maximumWaitTime: '360'

# - task: CmdLine@2
#   displayName: Veracode Static Pipeline Scanner
#   continueOnError: true
#   inputs:
#     script: |
#       curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
#       unzip -o pipeline-scan-LATEST.zip
#       java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f $(build.artifactstagingdirectory)\Verademo-dotnet.zip 

#- task: Bash@3
#  displayName: Veracode Pipeline
#  inputs:
#    targetType: 'inline'
#    script: |
#      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
#      unzip -o pipeline-scan-LATEST.zip
#      java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f /home/vsts/work/1/s/app/target/verademo.war || true

# store artifacts for the pipeline scanner

    ##################################################################################################
    # API Calls - Downloading API Wrapper
    ##################################################################################################
#    - task: PowerShell@2
#      inputs:
#        targetType: 'inline'
#        script: |
#          $versionstring = curl https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/maven-metadata.xml | findstr /r "latest";
#          $version = $versionstring.Trim() -replace '<latest>', '' -replace '</latest>', '';
#          curl https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/$version/vosp-api-wrappers-java-$version-dist.zip -o dist.zip
#          unzip -o dist.zip
#          ls

#- publish: $(System.DefaultWorkingDirectory)/results.json
#  artifact: VeracodeBaseline
## This task makes the pipeline build artifacts available in a known location for upload to Veracode
#- task: PublishPipelineArtifact@1
#  inputs:
#    targetPath: '$(System.DefaultWorkingDirectory)'
#    artifactName: Debug

# - task: PublishBuildArtifacts@1
#   displayName: Create Build Artifact for Veracode Static Pipeline Scanner Results
#   inputs:
#     PathtoPublish: 'results.json'
#     ArtifactName: 'Build'
#     publishLocation: 'Container'

# - task: PowerShell@2
#   displayName: Veracode SCA Scanner
#   inputs:
#     targetType: 'inline' #Before it was looking for powershell script to execute, and the target type by default is filepath
#     script: |
#       Set-ExecutionPolicy AllSigned -Scope Process -Force
#       iex ((New-Object System.Net.WebClient).DownloadString('https://download.srcclr.com/ci.ps1')) 
#       srcclr scan
#   env:
#     SRCCLR_API_TOKEN: $(SRCCLRTOKEN)

#     # to scan this way targetType need to be inline
#     # given error code 1: issues with authentication need to add srcclr token as enviornmental variable

- task: Veracode Flaw Importer@3
  continueOnError: true
  inputs:
    ConnectionDetailsSelection: 'Credentials'
    apiId: '$(VERACODE_API_ID)'
    apiKey: '$(VERACODE_API_KEY)'
    veracodeAppProfile: '$(system.teamProject)'
    sandboxName: 
    scanType: 'Dynamic and Static Analysis'
    importType: 'All Flaws'
    workItemType: 'Issue'
    area: '$(system.teamProject)'
    overwriteAreaPathInWorkItemsOnImport: true
    flawImportLimit: '1000'
